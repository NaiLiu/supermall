1.关联git
git add .        （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）

git commit  -m  ”提交信息”  （注：“提交信息”里面换成你需要，如“first commit”）

git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）

2.划分目录

3.引入css文件
引入normalize.css
创建base.css

5.设置别名和editorconfig
除了network和router都设置别名
-------->初始化工作完成

1.修改title图标
"<%= BASE_URL %>favicon.ico"
2.完成Tabbar

3.完成NavBar组件
在主页进行使用
 line-height如果标签内没有内容会不显示高度
主页NavBar的css在home里单独设置

4.制作主页轮播图
在network添加request =请求数据的axios
在network添加home => 单独为主页请求数据的模块

5.制作主页推荐
新建RecommendView接受父组件数据

6.制作NavBar吸顶效果

7.制作主页的tabControl表情
  为选中效果所以在遍历时也要遍历下标

8.请求主页商品数据
上拉刷新的数据模型：
goods:{
  'pop':{page:,list[]},
   'news':{page:,list[]},
    'sell':{page:,list[]}
}
由于有三类不同的数据【流行】【新款】【精选】
每种类型的数据还要对应不同的页码
所以在请求数据的时候需要得到数据的同时还要更改页码

this.goods[type].list.push(...res.data.list)
this.goods[type].page+=1

9.首页商品的展示
  组件的封装 ：
  goodsList
  GoddsListItem

10.更好的滚动
better-scroll
mounted要写在mounted里
ref如果是绑定在组件里 this.$refs。refname获取到的是组件对象
如果是普通元素，就获取到一个元素对象

11.制作backtop按钮并实现监听
组件的事件监听要使用.native
给Scroll绑定ref，这样在home就可以通过$refs获取Scroll里的Scroll属性了

12.解决上拉卡顿
better-Scroll有多少区域可以滚动是由scrollerHeight属性决定的
scrollerHeight属性根据Better-Scroller中的content组件决定的
但是首页在计算scrollerheight时，是没有把图片包括在内的
后来图片加载出来后，scrollerHeight属性没有更新
使用事件总线，如果图片加载完成通过总线发送加载完成的信息让Home接收
解决办法：监听图片是否加载完成，完成后执行refresh()
JS里可以用img.onload
Vue使用@load

13.上拉加载更多

14.tabControl的吸顶效果
必须知道滚动到什么高度时有吸顶效果=>offsetTop
如果直接获取组件的offsetTop，值是不正确的

监听HomeSwiper的img加载完成
加载完成后，发出世界，在Home中获取正确的值

